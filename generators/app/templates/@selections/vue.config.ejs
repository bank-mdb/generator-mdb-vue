const path = require("path");
const yargs = require("yargs");
const CompressionPlugin = require("compression-webpack-plugin");
<%_ if (includePrerender) { _%>
const PrerenderSPAPlugin = require("prerender-spa-plugin");
const Renderer = PrerenderSPAPlugin.PuppeteerRenderer;
<%_ } _%>

function resolve(dir) {
  return path.join(__dirname, dir);
}
const proxyTarget = {
  dev: {
    baseUrl: "http://yapi.demo.qunar.com/mock/65982/"
  },
  test: {
    baseUrl: "https://easy-mock.com/mock/5bbef26ad6735265fe8afac2/imada"
  },
  mock: {
    baseUrl: "https://easy-mock.com/mock/5bbef26ad6735265fe8afac2/imada"
  }
};

const argv = yargs.argv;
const target = proxyTarget[argv.env] || proxyTarget.dev;
console.log("proxy ", target);

const externals = {
  vue: 'Vue',
  'vue-router': 'VueRouter',
  vuex: 'Vuex',
  axios: 'axios',
  'element-ui': 'ELEMENT'
};
const cdn = {
  css: ['https://cdn.bootcss.com/element-ui/2.8.2/theme-chalk/index.css'],
  js: [
      'https://cdn.bootcss.com/vue/2.6.10/vue.min.js',
      'https://cdn.bootcss.com/vue-router/3.0.6/vue-router.min.js',
      'https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js',
      'https://cdn.bootcss.com/axios/0.18.0/axios.min.js'
      <%_ if (includeElementUI) { _%>
      ,
      'https://cdn.bootcss.com/element-ui/2.8.2/index.js',
      'https://cdn.bootcss.com/element-ui/2.8.2/locale/en.min.js',
      'https://cdn.bootcss.com/element-ui/2.8.2/locale/zh-CN.min.js'
      <%_ } _%>
  ]
  <%_ if (includeElementUI) { _%>
  ,
  isElementUi: true
  <%_ } _%>
};
const productionGzipExtensions = ['js', 'css'];

module.exports = {
  lintOnSave: true,
  productionSourceMap: false,
  // eslint-disable-next-line no-unused-vars
  configureWebpack: config => {
    if (process.env.NODE_ENV === "production") {
      console.log("为生产环境修改配置...");
      let myConfig={
        plugins:[]
      };

      <%_ if (includePrerender) { _%>
        myConfig.plugins.push(
          new PrerenderSPAPlugin({
            staticDir: path.join(__dirname, "dist"),
            routes: ["/"],
            renderer: new Renderer({
              inject: {
                foo: "bar"
              },
              headless: false,
              renderAfterDocumentEvent: "render-event"
            })
          })
        );
      <%_ } _%>
      myConfig.externals=externals;
      myConfig.plugins.push(new CompressionPlugin({
        test: new RegExp('\\.(' + productionGzipExtensions.join('|') + ')$'),
        threshold: 8192,
        minRatio: 0.8
      }));
      return myConfig;
    } else {
      console.log("为开发环境修改配置...");
    }
  },
  chainWebpack: config => {
    config.resolve.alias
      .set("@", resolve("src"))
      .set("styles", resolve("src/styles"))
      .set("assets", resolve("src/assets"))
      .set("components", resolve("src/components"))
      .set("store", resolve("src/store"));
    config.module
      .rule("svg")
      .exclude.add(resolve("src/icons"))
      .end();
    config.module
      .rule("icons")
      .test(/\.svg$/)
      .include.add(resolve("src/icons"))
      .end()
      .use("svg-sprite-loader")
      .loader("svg-sprite-loader")
      .options({
        symbolId: "icon-[name]"
      })
      .end();
    config.plugin('html').tap(args => {
      if (process.env.NODE_ENV === 'production') {
          args[0].cdn = cdn;
      }
      return args;
    });
  },
  devServer: {
    open: process.platform === "darwin",
    port: 8888,
    https: false,
    hotOnly: false,
    proxy: {
      "/api": {
        target: target.baseUrl,
        changeOrigin: true,
        pathRewrite: {
          "^/api": ""
        }
      }
    }
  },

  // 第三方插件配置
  pluginOptions: {},

  css: {
    loaderOptions: {
      sass: {
        data: '@import "@/styles/index.scss";'
      }
    }
  }
};
